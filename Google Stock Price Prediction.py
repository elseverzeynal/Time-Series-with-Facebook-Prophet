# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1faFRPvEIG2cXS6n2LTz4t8ofeoK05Tt3
"""

!pip install pystan==2.19
!pip install fbprophet

pip install bayesian-optimization

import warnings
import numpy as np
import pandas as pd
import random as rd
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from fbprophet import Prophet
import statsmodels.tsa.api as smt
import statsmodels.api as sn
from statsmodels.tsa.stattools import adfuller

df=pd.read_csv('/content/drive/MyDrive/google-data.csv')
df.head()

df.info()

df['date']=pd.to_datetime(df['Date']).dt.strftime('%d/%m/%y')
df.drop(columns=['Date'],inplace=True)

data=pd.DataFrame()
data['date']=pd.date_range(start='2013-01-02', end='2017-12-27')
data['date']=data['date'].dt.strftime('%d/%m/%y')
data=data.merge(df,how='left',on='date')

df.head()

numeric_cols = ['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']
for cols in numeric_cols:
  data[cols]=data[cols].interpolate(method='cubic')

df.info()

a=sn.tsa.seasonal_decompose(data.Close.values,freq=365,model='additive')
m=sn.tsa.seasonal_decompose(data.Close.values,freq=365,model='multiplicilative')

fig=a.plot()

fig=m.plot()

def st_check(timeseries):
  dftest = adfuller(timeseries,autolag='AIC')
  dfoutput=pd.Series(dftest[0:4],index=['Test Statistic','p-value','#Logs Used','Number of Observations Used'])
  for key, value in dftest[4].items():
    dfoutput[('Critical Value (%s)'%key)]=value
  print(dfoutput)
st_check(data.Close)

l=(1,2)
a = plt.subplot2grid(l,(0,0))
p = plt.subplot2grid(l,(0,1))
smt.graphics.plot_acf(data.Close,lags=20,ax=a,alpha=0.5)
smt.graphics.plot_pacf(data.Close,lags=20,ax=p,alpha=0.5)
plt.tight_layout()

model_df = data.loc[:,['date','Close']].rename(columns={'date': 'ds', 'Close': 'y'})

!pip install pystan==2.19
!pip install fbprophet

from fbprophet import Prophet

model = Prophet(yearly_seasonality=True,interval_width=0.95)
model.fit(model_df)

ft = model.make_future_dataframe(periods=100)
pred = model.predict(ft)
pred[['ds','yhat','yhat_lower','yhat_upper']].head()

plt.figure(figsize=(18, 6))
model.plot(pred, xlabel = 'Date', ylabel = 'Close')
plt.title('Graphics')

model.plot_components(pred);

from fbprophet.diagnostics import cross_validation
from fbprophet.diagnostics import performance_metrics
def optimization_function(changepoint_prior_scale,seasonality_prior_scale):
  model=Prophet(changepoint_prior_scale=changepoint_prior_scale,seasonality_prior_scale=seasonality_prior_scale).fit(model_df)
  cross_val=cross_validation(model,horizon='300 days',parallel='processes')
  perf_m=performance_metrics(cross_val,rolling_window=1)
  rmse=(perf_m['rmse'].values[0])
  print(rmse)
  return rmse

from bayes_opt import BayesianOptimization
parameters={'changepoint_prior_scale':[0.001,0.5],
            'seasonality_prior_scale':[0.01,10]}
optimizer=BayesianOptimization(
    f=optimization_function,
    pbounds=parameters,
    random_state=100
)

optimizer.maximize(init_points=2,n_iter=3)

print(optimizer.max)

model = Prophet(yearly_seasonality=True,interval_width=0.95,changepoint_prior_scale=0.27215906595369177,seasonality_prior_scale=2.7909101570870236)
model.fit(model_df)

ft = model.make_future_dataframe(periods=100)
pred = model.predict(ft)
pred[['ds','yhat','yhat_lower','yhat_upper']].head()

plt.figure(figsize=(18, 6))
model.plot(pred, xlabel = 'Date', ylabel = 'Close')
plt.title('Graphics')

model.plot_components(pred)

